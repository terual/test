#!/bin/bash

# Procedure:
# 1. Make updates to repo before running script
# 2. Run script and make changes to repo.xml, bump version in install.xml and repo.xml
# 3. Commit changes, bump tag and upload zip to release

DRAFT="false"
PRE="false"
BRANCH="master"

REPO_REMOTE=`git config --get remote.origin.url`
if [ -z $REPO_REMOTE ]; then
	echo "Not a git repository"
	exit 1
fi
REPO_NAME=$(basename -s .git $REPO_REMOTE)
REPO_OWNER="terual" #$(git config --get user.name)

# Check if xmlstarlet is available
if ! command -v xmlstarlet &> /dev/null
then
    echo "xmlstarlet could not be found"
    exit 1
fi

# Check if jq is available
if ! command -v jq &> /dev/null
then
    echo "jq could not be found"
    exit 1
fi

# Get args
while getopts t:v:m: option
do
	case "${option}"
		in
		t) TOKEN="$OPTARG";;
		v) VERSION="$OPTARG";;
		m) MESSAGE="$OPTARG";;
	esac
done

if [ -z "$TOKEN" ]
  then
	echo "Usage: git-commit-and-release -t <github-token> -v <version> [-m <message>]"
	exit 1
fi

if [ -z "$VERSION" ]
  then
	echo "Usage: git-commit-and-release -t <github-token> -v <version> [-m <message>]"
	exit 1
fi

# Name and URL of zipball
ZIPBALL="$REPO_NAME-$VERSION.zip"
URL="https://github.com/$REPO_OWNER/$REPO_NAME/releases/download/$VERSION/$ZIPBALL"

# Set default message
if [ "$MESSAGE" == "0" ]; then
	MESSAGE=$(printf "Release of version %s" $VERSION)
fi

# First update version in install.xml
xmlstarlet ed --inplace --update "//extension/version" --value "$VERSION" install.xml

# Then zip plugin and update repo.xml
zip -r "$ZIPBALL" . -x ".git/*" ".github/*" ".gitignore" "repo.xml" "*.zip" "*.sh" &> /dev/null
SHA=`sha1sum "$ZIPBALL" | awk '{ print $1 }'`
xmlstarlet ed --inplace --update "//extensions/plugins/plugin/sha" --value "$SHA" repo.xml
xmlstarlet ed --inplace --update "//extensions/plugins/plugin/url" --value "$URL" repo.xml
xmlstarlet ed --inplace --update "//extensions/plugins/plugin/@version" --value "$VERSION" repo.xml

# Commit
git commit -a -m "$MESSAGE"
git push

# Create release
echo "Create release..."
API_JSON=`printf '{"tag_name": "%s","target_commitish": "%s","name": "%s","body": "%s","draft": %s,"prerelease": %s}' "$VERSION" "$BRANCH" "$VERSION" "$MESSAGE" "$DRAFT" "$PRE"`
API_RESPONSE_STATUS=`curl --data "$API_JSON" -s https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases?access_token=$TOKEN`
echo "$API_RESPONSE_STATUS"


# Uploading asset
echo "Upload zipball..."
UPLOAD_URL=`echo "$API_RESPONSE_STATUS" | jq .upload_url | sed 's/[{].*[}]//g'`
UPLOAD_URL_ZIP="$UPLOAD_URL&name=$ZIPBALL"

GITHUB_OAUTH_BASIC=$(printf %s:x-oauth-basic $TOKEN)
curl "$GITHUB_OAUTH_BASIC" -s --data-binary @"$ZIPBALL" -H "Authorization: token $TOKEN" -H "Content-Type: application/octet-stream" "$UPLOAD_URL_ZIP"

